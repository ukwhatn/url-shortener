services:
  nginx:
    image: nginx:latest
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/server.dev.conf:/etc/nginx/conf.d/server.conf
      - ./nginx/log:/var/log/nginx
      - front_dist:/www/dist
    ports:
      - "127.0.0.1:59990:80"
    restart: always
    networks:
      - nginx
    depends_on:
      - front
      - server

  front:
    build:
      context: .
      dockerfile: ./front/Dockerfile
    command: [ "/bin/sh", "-c", "yarn dev" ]
    ports:
      - "127.0.0.1:59991:5173"
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: true
      LANG: C.UTF-8
      TZ: Asia/Tokyo
    volumes:
      - ./front:/app
      - node_modules:/app/node_modules
      - front_dist:/usr/build/dist
    restart: always
    networks:
      - nginx

  server:
    build:
      context: .
      dockerfile: ./server/Dockerfile
    command: [ "/bin/sh", "-c", "fastapi dev main.py --host 0.0.0.0 --port 80 --proxy-headers" ]
    volumes:
      - ./server:/app
      - ./db:/app/db
      - ./redis:/app/redis_crud
    env_file:
      - ./envs/db.env
      - ./envs/server.env
    environment:
      - ENV_MODE=development
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - db
      - redis
      - nginx

  db:
    image: postgres:16.1
    env_file:
      - ./envs/db.env
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    restart: always
    healthcheck:
      test: pg_isready -U postgres
      interval: 2s
      timeout: 5s
      retries: 30
    networks:
      - db

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: user@example.com
      PGADMIN_DEFAULT_PASSWORD: password
    ports:
      - "127.0.0.1:59113:80"
    depends_on:
      - db
    networks:
      - db

  redis:
    image: redis:7.2.4
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli ping
      interval: 2s
      timeout: 5s
      retries: 30
    networks:
      - redis

  discord:
    build:
      context: .
      dockerfile: discord/Dockerfile
    volumes:
      - ./discord:/app
      - ./db:/app/db
      - ./redis:/app/redis_crud
    env_file:
      - ./envs/discord.env
      - ./envs/db.env
      - ./envs/sentry.env
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - db
      - redis

  db-migrator:
    build:
      context: .
      dockerfile: ./db/Dockerfile
    tty: true
    volumes:
      - ./db:/app
    env_file:
      - ./envs/db.env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db

volumes:
  pg_data:
  redis_data:
  node_modules:
  front_dist:


networks:
  nginx:
    driver: bridge
  db:
    driver: bridge
  redis:
    driver: bridge